from flask_admin.contrib.sqla import ModelView
from flask_login import current_user
from .models import *
from . import db
from flask_admin.helpers import get_url
from markupsafe import Markup
from app.utils.telegram_notify import send_telegram_message
from flask import request, redirect, flash


class AdminOnlyView(ModelView):
    def is_accessible(self):
        return current_user.is_authenticated and current_user.role == 'admin'

    def inaccessible_callback(self, name, **kwargs):
        return "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403


class UserAdminView(ModelView):
    column_exclude_list = ['password']  # –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–æ–ª—å

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    column_list = ('id', 'name', 'email', 'telegram_id', 'telegram_username')
    column_searchable_list = ('name', 'email', 'telegram_username', 'telegram_id')
    form_columns = ('name', 'email', 'telegram_id', 'telegram_username')

    def on_model_change(self, form, model, is_created):
        if form.password.data:
            model.password = form.password.data  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        elif not is_created:
            existing = self.session.get(self.model, model.id)
            if existing:
                model.password = existing.password
        return super().on_model_change(form, model, is_created)

    def is_accessible(self):
        return current_user.is_authenticated and current_user.role == 'admin'

    def inaccessible_callback(self, name, **kwargs):
        return "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

class EventManagerView(ModelView):
    def is_accessible(self):
        return current_user.is_authenticated and current_user.role in ['event_manager', 'admin']

    def inaccessible_callback(self, name, **kwargs):
        return "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403


class MedicView(ModelView):
    column_list = ('id', 'user', 'reason', 'status', 'date', 'file_download')

    def _file_download(view, context, model, name):
        if model.file_data:
            url = f"/admin/medical_request/{model.id}/download"
            return Markup(f'<a href="{url}" target="_blank">üìé –°–∫–∞—á–∞—Ç—å</a>')
        return '‚Äî'

    column_formatters = {
        'file_download': _file_download
    }

    column_labels = {
        'file_download': '–§–∞–π–ª'
    }

    form_columns = ('status',)  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å

    def is_accessible(self):
        return current_user.is_authenticated and current_user.role in ['medic', 'admin']

    def inaccessible_callback(self, name, **kwargs):
        return "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403

    def after_model_change(self, form, model, is_created):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        db.session.expire_all()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à SQLAlchemy
        latest = MedicalRequest.query.get(model.id)

        if latest:
            formatted_date = latest.date.strftime('%Y-%m-%d %H:%M')
            message = (
                f"üìÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ</b>\n"
                f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{latest.id}\n"
                f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {formatted_date}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {latest.reason}\n"
                f"üìå <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {latest.status}"
            )
            send_telegram_message(latest.user_id, message)


def setup_admin_views(admin):
    admin.add_view(UserAdminView(User, db.session))
    admin.add_view(AdminOnlyView(Contact, db.session))
    admin.add_view(AdminOnlyView(Room, db.session))
    admin.add_view(AdminOnlyView(Instruction, db.session))
    admin.add_view(AdminOnlyView(FAQ, db.session))
    admin.add_view(AdminOnlyView(Setting, db.session))
    admin.add_view(AdminOnlyView(SupportRequest, db.session))
    admin.add_view(AdminOnlyView(Club, db.session))
    admin.add_view(EventManagerView(Event, db.session))
    admin.add_view(MedicView(MedicalRequest, db.session))
