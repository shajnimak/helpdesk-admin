from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json
import os
import requests
from dotenv import load_dotenv
import asyncio
from app.utils.database import AsyncSessionLocal
from app.utils.crud import get_token
from datetime import datetime
from aiogram.types import BotCommand


load_dotenv()
router = Router()

CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
TENANT_ID = os.getenv("TENANT_ID")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REDIRECT_URI = "https://helpdesk-admin-r0n0.onrender.com/callback"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp.include_router(router)

# /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    async with AsyncSessionLocal() as session:
        access_token = await get_token(session, user_id)

    if access_token:
        email = get_user_email(access_token)
        if email:
            role = define_role(email)
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {email}!\n–í–∞—à–∞ —Ä–æ–ª—å: {role}.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ: /login")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /login")

# /login
@router.message(Command("login"))
async def send_login_link(message: types.Message):
    auth_url = (
        f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/authorize"
        f"?client_id={CLIENT_ID}&response_type=code&redirect_uri={REDIRECT_URI}"
        f"&response_mode=query&scope=User.Read Mail.Read Mail.Send&state={message.from_user.id}"
    )
    await message.answer(f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–í–æ–π—Ç–∏]({auth_url})", parse_mode="Markdown")

def get_user_email(access_token):
    headers = {"Authorization": f"Bearer {access_token}"}
    url = "https://graph.microsoft.com/v1.0/me"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json().get("mail")
    return None

def define_role(email):
    if email:
        local_part = email.split("@")[0]
        if local_part.isdigit():
            return "–°—Ç—É–¥–µ–Ω—Ç"
        else:
            return "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å / –°–æ—Ç—Ä—É–¥–Ω–∏–∫"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"

@router.message(Command("instructions"))
async def send_instructions_list(message: types.Message):
    try:
        response = requests.get("http://localhost:5001/api/instructions")
        if response.status_code != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
            return

        instructions = response.json()
        if not instructions:
            await message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=instr["title_ru"],
                    callback_data=f"instr_{instr['id']}"
                )
            ] for instr in instructions
        ])

        await message.answer("üìò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", reply_markup=keyboard)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(lambda c: c.data.startswith("instr_"))
async def show_instruction(callback_query: CallbackQuery):
    instr_id = callback_query.data.split("_")[1]

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º (–∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É)
        response = requests.get("http://localhost:5001/api/instructions")
        if response.status_code != 200:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
            return

        instructions = response.json()
        instr = next((i for i in instructions if str(i["id"]) == instr_id), None)
        if not instr:
            await callback_query.message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏
        if instr.get("text_ru") and ("http" in instr["text_ru"] or "www." in instr["text_ru"]):
            await callback_query.message.answer(f"üîó –°—Å—ã–ª–∫–∞: {instr['text_ru']}")
        else:
            await callback_query.message.answer(f"<b>{instr['title_ru']}</b>\n\n{instr['text_ru']}", parse_mode="HTML")

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")



# /events
@router.message(Command("events"))
async def get_events_command(message: types.Message):
    try:
        response = requests.get("http://localhost:5001/api/events")
        if response.status_code != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å API.")
            return

        events = response.json()
        if not events:
            await message.answer("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        grouped = {
            'üá∑üá∫ –†—É—Å—Å–∫–∏–π': [(e['title_ru'], e['description_ru'], e['date']) for e in events if e['title_ru'] and e['description_ru']],
            'üá¨üáß English': [(e['title_en'], e['description_en'], e['date']) for e in events if e['title_en'] and e['description_en']],
            'üá∞üáø “ö–∞–∑–∞“õ—à–∞': [(e['title_kk'], e['description_kk'], e['date']) for e in events if e['title_kk'] and e['description_kk']],
        }

        text = "<b>üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
        for lang, items in grouped.items():
            if items:
                text += f"<b>{lang}</b>\n"
                for i, (title, desc, date) in enumerate(items, start=1):
                    text += f"\n<b>{i}. {title}</b>\nüïì {date}\n{desc}\n"
                text += "\n"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# /faqs
@router.message(Command("faqs"))
async def get_faq_command(message: types.Message):
    try:
        response = requests.get("http://localhost:5001/api/faqs")
        if response.status_code != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å API.")
            return

        faqs = response.json()
        if not faqs:
            await message.answer("–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        grouped = {
            'üá∑üá∫ –†—É—Å—Å–∫–∏–π': [(faq['question_ru'], faq['answer_ru']) for faq in faqs if faq['question_ru'] and faq['answer_ru']],
            'üá¨üáß English': [(faq['question_en'], faq['answer_en']) for faq in faqs if faq['question_en'] and faq['answer_en']],
            'üá∞üáø “ö–∞–∑–∞“õ—à–∞': [(faq['question_kk'], faq['answer_kk']) for faq in faqs if faq['question_kk'] and faq['answer_kk']],
        }

        text = "<b>üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):</b>\n\n"
        for lang, items in grouped.items():
            if items:
                text += f"<b>{lang}</b>\n"
                for i, (q, a) in enumerate(items, start=1):
                    text += f"\n<b>{i}. {q}</b>\n{a}\n"
                text += "\n"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# /clubs
@router.message(Command("clubs"))
async def get_clubs_command(message: types.Message):
    try:
        response = requests.get("http://localhost:5001/api/clubs")
        if response.status_code == 200:
            clubs = response.json()
            if not clubs:
                await message.answer("–ö–ª—É–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            text = "üìö –°–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤:\n\n"
            for club in clubs:
                text += (
                    f"üî∏ <b>{club['name']}</b>\n"
                    f"{club['description']}\n"
                    f"<a href='{club['url']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª—É–±</a>\n\n"
                )
            await message.answer(text, parse_mode="HTML")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—É–±–æ–≤ —Å API.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# /contacts
@router.message(Command("contacts"))
async def get_contacts_command(message: types.Message):
    try:
        response = requests.get("http://localhost:5001/api/contacts")
        if response.status_code == 200:
            contacts = response.json()
            if not contacts:
                await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            text = "üìû –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:\n\n"
            for contact in contacts:
                text += (
                    f"üè¢ <b>{contact['department']}</b>\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact['phone']}\n"
                    f"‚úâÔ∏è Email: {contact['email']}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {contact['category']}\n\n"
                )
            await message.answer(text, parse_mode="HTML")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å API.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# /inbox
@router.message(Command("inbox"))
async def get_inbox(message: types.Message):
    user_id = str(message.from_user.id)
    async with AsyncSessionLocal() as session:
        access_token = await get_token(session, user_id)

    if not access_token:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /login.")
        return

    headers = {"Authorization": f"Bearer {access_token}"}
    url = "https://graph.microsoft.com/v1.0/me/messages?$top=5&$orderby=receivedDateTime DESC"
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        emails = response.json().get("value", [])
        if not emails:
            await message.answer("–í—Ö–æ–¥—è—â–∏–µ –ø—É—Å—Ç—ã.")
            return

        email_list = []
        for email in emails:
            subject = email.get("subject", "–ë–µ–∑ —Ç–µ–º—ã")
            sender = email.get("from", {}).get("emailAddress", {}).get("address", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å")
            email_list.append(f"üì© <b>{subject}</b>\n–û—Ç: {sender}\n")

        await message.answer("\n".join(email_list), parse_mode="HTML")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º: {response.status_code}")

# –ß–ï–†–ù–û–í–ò–ö –ø–∏—Å—å–º–∞
email_draft = {}
support_draft = {}
medical_draft = {}
med_upload_draft = {}
id_card_draft = {}
reply_draft = {}
outlook_message_map = {}  # user_id -> {short_id: full_email_id}

from uuid import uuid4

@router.message(Command("replyinbox"))
async def get_replyable_messages(message: types.Message):
    user_id = str(message.from_user.id)
    async with AsyncSessionLocal() as session:
        token = await get_token(session, user_id)

    if not token:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /login.")
        return

    headers = {"Authorization": f"Bearer {token}"}
    url = "https://graph.microsoft.com/v1.0/me/messages?$top=5&$orderby=receivedDateTime DESC"
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    emails = response.json().get("value", [])
    if not emails:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
        return

    outlook_message_map[user_id] = {}  # —Å–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö id

    buttons = []
    for email in emails:
        subject = email.get("subject", "–ë–µ–∑ —Ç–µ–º—ã")
        full_id = email["id"]
        short_id = str(uuid4())[:8]  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–π ID
        outlook_message_map[user_id][short_id] = full_id

        buttons.append([InlineKeyboardButton(text=subject, callback_data=f"reply_{short_id}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üì• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("reply_"))
async def prepare_reply(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    short_id = callback.data.replace("reply_", "")

    full_id = outlook_message_map.get(user_id, {}).get(short_id)

    if not full_id:
        await callback.message.answer("‚ùå –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    async with AsyncSessionLocal() as session:
        token = await get_token(session, user_id)

    headers = {"Authorization": f"Bearer {token}"}
    res = requests.get(f"https://graph.microsoft.com/v1.0/me/messages/{full_id}", headers=headers)

    if res.status_code != 200:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞.")
        return

    email_data = res.json()
    sender_email = email_data.get("from", {}).get("emailAddress", {}).get("address")

    if not sender_email:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
        return

    reply_draft[user_id] = {"msg_id": full_id, "to_email": sender_email}
    await callback.message.answer(f"‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è {sender_email}:")

# @router.message()
# async def handle_reply_body(message: types.Message):
#     user_id = str(message.from_user.id)
#     if user_id not in reply_draft:
#         return
#
#     reply_info = reply_draft[user_id]
#     reply_body = message.text
#     to_email = reply_info["to_email"]
#
#     success = await send_email(user_id, to_email, reply_body)
#
#     if success:
#         await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}.")
#     else:
#         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")
#
#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É,
#     # –µ—Å–ª–∏ email-to-TG mapping —Ö—Ä–∞–Ω–∏—Ç—Å—è
#     del reply_draft[user_id]


@router.message(Command("idcard"))
async def start_id_card_request(message: types.Message):
    user_id = str(message.from_user.id)
    async with AsyncSessionLocal() as session:
        access_token = await get_token(session, user_id)

    if not access_token:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login.")
        return

    id_card_draft[user_id] = {}
    await message.answer("ü™™ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID-–∫–∞—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ç–µ—Ä—è, –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É –∏ —Ç.–¥.):")


# @router.message()
# async def handle_user_message(message: types.Message):
#     user_id = str(message.from_user.id)
#
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
#     if user_id in support_draft:
#         message_body = message.text
#         success = await send_support_email(user_id, message_body)
#
#         if success:
#             await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!")
#         else:
#             await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#         del support_draft[user_id]
#         return
#
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID-–∫–∞—Ä—Ç–µ
#     if user_id in id_card_draft:
#         message_body = message.text
#         recipient = "m.m.shdmn@gmail.com"
#         success = await send_email(user_id, recipient, message_body)
#
#         if success:
#             await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± ID-–∫–∞—Ä—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª!")
#         else:
#             await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#         del id_card_draft[user_id]
#         return
#
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
#     if user_id in email_draft and "recipient" not in email_draft[user_id]:
#         email_draft[user_id]["recipient"] = message.text
#         await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:")
#
#     elif user_id in email_draft and "recipient" in email_draft[user_id]:
#         email_draft[user_id]["message"] = message.text
#         recipient = email_draft[user_id]["recipient"]
#         email_body = email_draft[user_id]["message"]
#
#         success = await send_email(user_id, recipient, email_body)
#
#         if success:
#             await message.answer(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {recipient}!")
#         else:
#             await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#         del email_draft[user_id]

@router.message(Command("medfile"))
async def upload_medical_file_start(message: types.Message):
    user_id = str(message.from_user.id)
    med_upload_draft[user_id] = {}
    await message.answer("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ PDF —Å –º–µ–¥—Å–ø—Ä–∞–≤–∫–æ–π.")

@router.message(lambda msg: msg.document or msg.photo)
async def handle_med_file_upload(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id not in med_upload_draft:
        return  # –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    file = message.document or message.photo[-1]  # —Ñ–æ—Ç–æ –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    file_id = file.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path

    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
    file_bytes = requests.get(file_url).content

    # –ò–º—è —Ñ–∞–π–ª–∞
    filename = file.file_name if hasattr(file, "file_name") else f"{file_id}.jpg"
    mime = file.mime_type if hasattr(file, "mime_type") else "image/jpeg"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    files = {
        'file': (filename, file_bytes, mime)
    }
    data = {
        'user_id': user_id,
        'reason': '–°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram',
        'date': datetime.utcnow().isoformat()
    }

    try:
        res = requests.post("http://localhost:5001/api/medical_requests", json=data)
        if res.status_code == 201:
            request_id = res.json()["id"]

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            upload_res = requests.post(
                f"http://localhost:5001/api/medical_requests/{request_id}/upload_file",
                files=files
            )

            if upload_res.status_code == 200:
                await message.answer("‚úÖ –ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –¥–µ–∫–∞–Ω–∞—Ç.")
            else:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    del med_upload_draft[user_id]


@router.message(Command("medical"))
async def start_medical_request(message: types.Message):
    user_id = str(message.from_user.id)
    medical_draft[user_id] = {}
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–¥–ø—É–Ω–∫—Ç:")

# @router.message()
# async def collect_medical_info(message: types.Message):
#     user_id = str(message.from_user.id)
#
#     # –®–∞–≥ 1: –ø—Ä–∏—á–∏–Ω–∞
#     if user_id in medical_draft and "reason" not in medical_draft[user_id]:
#         medical_draft[user_id]["reason"] = message.text
#         await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM")
#         return
#
#     # –®–∞–≥ 2: –¥–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
#     if user_id in medical_draft and "reason" in medical_draft[user_id] and "datetime" not in medical_draft[user_id]:
#         try:
#             from datetime import datetime
#             date = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
#             medical_draft[user_id]["datetime"] = date.isoformat()
#
#             # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ Flask API
#             data = {
#                 "user_id": int(user_id),
#                 "reason": medical_draft[user_id]["reason"],
#                 "date": medical_draft[user_id]["datetime"]
#             }
#
#             res = requests.post("http://localhost:5001/api/medical_requests", json=data)
#             if res.status_code == 201:
#                 await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ–¥–ø—É–Ω–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
#             else:
#                 await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         except ValueError:
#             await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-05-18 14:30)")
#         finally:
#             del medical_draft[user_id]

@router.message(Command("support"))
async def ask_support_message(message: types.Message):
    user_id = str(message.from_user.id)
    async with AsyncSessionLocal() as session:
        access_token = await get_token(session, user_id)

    if not access_token:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /login.")
        return

    support_draft[user_id] = {}
    await message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")

# @router.message()
# async def handle_support_message(message: types.Message):
#     user_id = str(message.from_user.id)
#
#     # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
#     if user_id in support_draft:
#         message_body = message.text
#         success = await send_support_email(user_id, message_body)
#
#         if success:
#             await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!")
#         else:
#             await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#         del support_draft[user_id]
#         return
#
#     # –û—Å—Ç–∞–≤–∏–º —ç—Ç–æ –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ email
#     if user_id in email_draft and "recipient" not in email_draft[user_id]:
#         email_draft[user_id]["recipient"] = message.text
#         await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:")
#
#     elif user_id in email_draft and "recipient" in email_draft[user_id]:
#         email_draft[user_id]["message"] = message.text
#         recipient = email_draft[user_id]["recipient"]
#         email_body = email_draft[user_id]["message"]
#
#         success = await send_email(user_id, recipient, email_body)
#
#         if success:
#             await message.answer(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {recipient}!")
#         else:
#             await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#         del email_draft[user_id]

async def send_support_email(user_id, email_body):
    async with AsyncSessionLocal() as session:
        access_token = await get_token(session, user_id)

    if not access_token:
        return False

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    email_data = {
        "message": {
            "subject": "–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ Telegram",
            "body": {
                "contentType": "Text",
                "content": email_body
            },
            "toRecipients": [
                {"emailAddress": {"address": "akzhanimanbazarova@gmail.com"}}
            ]
        },
        "saveToSentItems": "true"
    }

    response = requests.post("https://graph.microsoft.com/v1.0/me/sendMail", json=email_data, headers=headers)
    return response.status_code == 202


@router.message(Command("sendemail"))
async def ask_recipient(message: types.Message):
    user_id = str(message.from_user.id)
    async with AsyncSessionLocal() as session:
        access_token = await get_token(session, user_id)

    if not access_token:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /login.")
        return

    email_draft[user_id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")

# @router.message()
# async def ask_email_body(message: types.Message):
#     user_id = str(message.from_user.id)
#
#     if user_id in email_draft and "recipient" not in email_draft[user_id]:
#         email_draft[user_id]["recipient"] = message.text
#         await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:")
#
#     elif user_id in email_draft and "recipient" in email_draft[user_id]:
#         email_draft[user_id]["message"] = message.text
#         recipient = email_draft[user_id]["recipient"]
#         email_body = email_draft[user_id]["message"]
#
#         success = await send_email(user_id, recipient, email_body)
#
#         if success:
#             await message.answer(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {recipient}!")
#         else:
#             await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#         del email_draft[user_id]

@router.message()
async def general_message_handler(message: types.Message):
    user_id = str(message.from_user.id)

    # 1. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if user_id in support_draft:
        message_body = message.text
        success = await send_support_email(user_id, message_body)

        if success:
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        del support_draft[user_id]
        return

    # 2. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID-–∫–∞—Ä—Ç–µ
    if user_id in id_card_draft:
        message_body = message.text
        recipient = "akzhanimanbazarova@gmail.com"
        success = await send_email(user_id, recipient, message_body)

        if success:
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± ID-–∫–∞—Ä—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        del id_card_draft[user_id]
        return

    # 3. –û—Ç–≤–µ—Ç –Ω–∞ –ø–∏—Å—å–º–æ (reply)
    if user_id in reply_draft:
        reply_info = reply_draft[user_id]
        reply_body = message.text
        to_email = reply_info["to_email"]

        success = await send_email(user_id, to_email, reply_body)

        if success:
            await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")

        del reply_draft[user_id]
        return

    # 4. –ß–µ—Ä–Ω–æ–≤–∏–∫ email ‚Äî –≤–≤–æ–¥ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤–≤–µ–¥—ë–Ω)
    if user_id in email_draft and "recipient" not in email_draft[user_id]:
        email_draft[user_id]["recipient"] = message.text
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:")
        return

    # 5. –ß–µ—Ä–Ω–æ–≤–∏–∫ email ‚Äî –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞ (–µ—Å–ª–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å)
    if user_id in email_draft and "recipient" in email_draft[user_id]:
        email_draft[user_id]["message"] = message.text
        recipient = email_draft[user_id]["recipient"]
        email_body = email_draft[user_id]["message"]

        success = await send_email(user_id, recipient, email_body)

        if success:
            await message.answer(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {recipient}!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        del email_draft[user_id]
        return

    # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∑–∞—è–≤–∫–∏ (medical_draft) **
    if user_id in medical_draft:
        if "reason" not in medical_draft[user_id]:
            medical_draft[user_id]["reason"] = message.text
            await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM")
            return

        if "reason" in medical_draft[user_id] and "datetime" not in medical_draft[user_id]:
            try:
                from datetime import datetime
                date = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
                medical_draft[user_id]["datetime"] = date.isoformat()

                data = {
                    "user_id": int(user_id),
                    "reason": medical_draft[user_id]["reason"],
                    "date": medical_draft[user_id]["datetime"]
                }

                res = requests.post("http://localhost:5001/api/medical_requests", json=data)
                if res.status_code == 201:
                    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ–¥–ø—É–Ω–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except ValueError:
                await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-05-18 14:30)")
                return  # –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥
            finally:
                del medical_draft[user_id]
            return
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–π –æ—Ç–≤–µ—Ç


# Async –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
async def send_email(user_id, recipient, email_body):
    async with AsyncSessionLocal() as session:
        access_token = await get_token(session, user_id)

    if not access_token:
        return False

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    email_data = {
        "message": {
            "subject": "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –±–æ—Ç–∞",
            "body": {
                "contentType": "Text",
                "content": email_body
            },
            "toRecipients": [
                {"emailAddress": {"address": recipient}}
            ]
        },
        "saveToSentItems": "true"
    }

    response = requests.post("https://graph.microsoft.com/v1.0/me/sendMail", json=email_data, headers=headers)
    return response.status_code == 202

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="login", description="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        BotCommand(command="sendemail", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å email"),
        BotCommand(command="inbox", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ö–æ–¥—è—â–∏–µ"),
        BotCommand(command="replyinbox", description="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∏—Å—å–º–æ"),
        BotCommand(command="instructions", description="–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"),
        BotCommand(command="events", description="–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π"),
        BotCommand(command="faqs", description="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
        BotCommand(command="clubs", description="–ö–ª—É–±—ã"),
        BotCommand(command="contacts", description="–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
        BotCommand(command="medical", description="–ó–∞–ø–∏—Å—å –≤ –º–µ–¥–ø—É–Ω–∫—Ç"),
        BotCommand(command="medfile", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥—Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="support", description="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        BotCommand(command="idcard", description="–ó–∞–ø—Ä–æ—Å –Ω–∞ ID-–∫–∞—Ä—Ç—É"),
    ]
    await bot.set_my_commands(commands)


# MAIN
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await set_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
